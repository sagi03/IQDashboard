{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./app/CustomerSenese/customersense.component.html","webpack:///./app/CustomerSenese/customersense.component.ts","webpack:///./app/Dashboard/dashboard.component.html","webpack:///./app/Dashboard/dashboard.component.ts","webpack:///./app/Services/customersense.ts","webpack:///./app/Services/dashboardService.ts","webpack:///./app/Services/google-charts.base.service.ts","webpack:///./app/Services/google-column-chart.service.ts","webpack:///./app/app.component.html","webpack:///./app/app.component.ts","webpack:///./app/app.module.ts","webpack:///./environments/environment.ts","webpack:///./main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<table id=\\\"tblCustomers\\\" class=\\\"table table-striped\\\" style=\\\"overflow:auto;\\\">\\r\\n    <tr>\\r\\n        <th>Account</th>\\r\\n        <th>Project</th>\\r\\n        <th>Client Email</th>\\r\\n        <th>Response</th>\\r\\n        <th>Feedback Date</th>\\r\\n        <th>Comment</th>\\r\\n    </tr>\\r\\n    <tr *ngFor=\\\"let item of customersensedata\\\">\\r\\n        <td>{{item.accountName}}</td>\\r\\n        <td>{{item.projectName}}</td>\\r\\n        <td>{{item.emailAddress}}</td>\\r\\n        <td>{{item.resoponse}}</td>\\r\\n        <td>{{item.feedbackDate}}</td>\\r\\n        <td><div innerHTML=\\\"{{item.emailBody}}\\\"></div></td>\\r\\n    </tr>\\r\\n</table>\"","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { customersenseService } from '../Services/customersense';\r\n@Component({\r\n    selector: \"customersense\",\r\n    templateUrl: \"customersense.component.html\",\r\n    styles: []\r\n})\r\n\r\nexport class customersense implements OnInit {\r\n    public customersensedata = [];\r\n    ngOnInit(): void {\r\n        this.data.loadCustomerSenseDetail(\"ce\", \"May 2019\", \"Green\").subscribe(success => {\r\n            if (success) {\r\n                this.customersensedata = this.data.customersensedetails;\r\n            }\r\n        });\r\n    }\r\n    constructor(private data: customersenseService) { }\r\n}","module.exports = \"<div class=\\\"app-title\\\">\\r\\n    <div>\\r\\n        <h1>{{title}}</h1>\\r\\n    </div>\\r\\n    <ul class=\\\"app-breadcrumb breadcrumb\\\">\\r\\n        <li class=\\\"breadcrumb-item\\\"><i class=\\\"fa fa-home fa-lg\\\"></i></li>\\r\\n        <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">{{title}}</a></li>\\r\\n    </ul>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"tile\\\">\\r\\n            <div class=\\\"tile-title-w-btn\\\">\\r\\n                <h3 class=\\\"tile-title\\\">Financial Services</h3>\\r\\n            </div>\\r\\n            <div class=\\\"tile-body\\\">\\r\\n                <div id=\\\"fs\\\" class=\\\"embed-responsive-item\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"tile\\\">\\r\\n            <div class=\\\"tile-title-w-btn\\\">\\r\\n                <h3 class=\\\"tile-title\\\">Communication Engineering</h3>\\r\\n            </div>\\r\\n            <div class=\\\"tile-body\\\">\\r\\n                <div id=\\\"ce\\\" class=\\\"embed-responsive-item\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"tile\\\">\\r\\n            <div class=\\\"tile-title-w-btn\\\">\\r\\n                <h3 class=\\\"tile-title\\\">Life Science</h3>\\r\\n            </div>\\r\\n            <div class=\\\"tile-body\\\">\\r\\n                <div id=\\\"ls\\\" class=\\\"embed-responsive-item\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"tile\\\">\\r\\n            <div class=\\\"tile-title-w-btn\\\">\\r\\n                <h3 class=\\\"tile-title\\\">Business Operations</h3>\\r\\n            </div>\\r\\n            <div class=\\\"tile-body\\\">\\r\\n                <div id=\\\"bo\\\" class=\\\"embed-responsive-item\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { dashboardService } from '../Services/dashboardService';\r\nimport { GoogleColumnChartService } from '../Services/google-column-chart.service';\r\n@Component({\r\n    selector: \"dashboard\",\r\n    templateUrl: \"dashboard.component.html\",\r\n    styles: []\r\n})\r\nexport class Dashboard implements OnInit {\r\n    title = 'Dashboard';\r\n    public dashboard = [];\r\n    ngOnInit(): void {\r\n        var vertical = \"fs\";\r\n        this.data.loadCustomerSense(vertical).subscribe(success => {\r\n            if (success) {\r\n                this.dashboard = this.data.dashboard;\r\n                this._columnChartService.BuildColumnChart(\"fs\", this.data.dashboard); \r\n            }\r\n        });\r\n        this.data.loadCustomerSense(\"ce\").subscribe(success => {\r\n            if (success) {\r\n                this.dashboard = this.data.dashboard;\r\n                this._columnChartService.BuildColumnChart(\"ce\", this.data.dashboard);\r\n            }\r\n        });\r\n        this.data.loadCustomerSense(\"ls\").subscribe(success => {\r\n            if (success) {\r\n                this.dashboard = this.data.dashboard;\r\n                this._columnChartService.BuildColumnChart(\"ls\", this.data.dashboard);\r\n            }\r\n        });\r\n        this.data.loadCustomerSense(\"bo\").subscribe(success => {\r\n            if (success) {\r\n                this.dashboard = this.data.dashboard;\r\n                this._columnChartService.BuildColumnChart(\"bo\", this.data.dashboard);\r\n            }\r\n        });\r\n       \r\n    }\r\n    constructor(private data: dashboardService, private _columnChartService: GoogleColumnChartService) { }\r\n}","ï»¿import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class customersenseService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public customersensedetails = [];\r\n\r\n    loadCustomerSenseDetail(vertical, month, color) {\r\n        return this.http.get(\"http://10.11.200.40:2121/api/Feedbackdetail?vertical=\" + vertical + \"&week=\" + month + \"&color=\" + color)\r\n            .pipe(map((data: any[]) => {\r\n                this.customersensedetails = data;\r\n                return true;\r\n            }));\r\n    }\r\n}","ï»¿import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class dashboardService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public dashboard = [];\r\n\r\n    loadCustomerSense(vertical) {\r\n        return this.http.get(\"http://10.11.200.40:2121/api/feedbackresponse?vertical=\" + vertical + \"&\" + \"flag=\" + false)\r\n            .pipe(map((data: any[]) => {\r\n                this.dashboard = data;\r\n                return true;\r\n            }));\r\n    }\r\n}","declare var google: any;\n\nexport class GoogleChartsBaseService {\n  constructor() { \n    google.charts.load('current', {'packages':['corechart']});\n  }\n  protected buildChart(data: any[], chartFunc: any, options: any) : void {\n      var func = (chartFunc, options) => {\n        var datatable = google.visualization.arrayToDataTable(data);\n       \n      chartFunc().draw(datatable, options);\n    };   \n    var callback = () => func(chartFunc, options);\n    google.charts.setOnLoadCallback(callback);\n  }  \n}","import { GoogleChartsBaseService } from './google-charts.base.service';\r\nimport { Injectable } from '@angular/core';\r\ndeclare var google: any;\r\n@Injectable()\r\nexport class GoogleColumnChartService extends GoogleChartsBaseService {\r\n    constructor() { super(); }\r\n    public BuildColumnChart(elementId: String, data: any[]): void {\r\n        var chartFunc = () => { return new google.visualization.ColumnChart(document.getElementById(<string>elementId)); };\r\n        var options = {\r\n            legend: { position: 'top', maxLines: 3, textStyle: { color: 'black', fontSize: 16 } },\r\n            isStacked: true,\r\n            colors: ['#FF0000', '#ffbf00', '#32CD32'],\r\n            vAxis: {\r\n                minValue: 0,\r\n                ticks: [0, 3, 6, 9]\r\n            }\r\n        };\r\n        this.buildChart(data, chartFunc, options);\r\n    }\r\n}","module.exports = \"<dashboard></dashboard>\"","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: `./app.component.html`,\n    styles: []\n})\nexport class AppComponent {\n    title = 'Dashboard';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport { Dashboard } from './Dashboard/dashboard.component';\r\nimport { customersense } from './CustomerSenese/customersense.component';\r\nimport { dashboardService } from './Services/dashboardService';\r\nimport { customersenseService } from './Services/customersense';\r\nimport { GoogleChartsBaseService } from './Services/google-charts.base.service';\r\nimport { GoogleColumnChartService } from './Services/google-column-chart.service';\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        Dashboard,\r\n        customersense\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        HttpClientModule\r\n    ],\r\n    providers: [dashboardService, GoogleChartsBaseService, GoogleColumnChartService, customersenseService],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}